/*
 * This file is generated by jOOQ.
 */
package cz.pesout.dbframeworks.jooq.generated.tables;


import cz.pesout.dbframeworks.jooq.generated.Keys;
import cz.pesout.dbframeworks.jooq.generated.tables.records.CountryRecord;
import cz.pesout.dbframeworks.jooq.generated.World;
import cz.pesout.dbframeworks.jooq.generated.enums.CountryContinent;
import cz.pesout.dbframeworks.jooq.generated.tables.City.CityPath;
import cz.pesout.dbframeworks.jooq.generated.tables.Countrylanguage.CountrylanguagePath;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Country extends TableImpl<CountryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>world.country</code>
     */
    public static final Country COUNTRY = new Country();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountryRecord> getRecordType() {
        return CountryRecord.class;
    }

    /**
     * The column <code>world.country.Code</code>.
     */
    public final TableField<CountryRecord, String> CODE = createField(DSL.name("Code"), SQLDataType.CHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.Name</code>.
     */
    public final TableField<CountryRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.CHAR(52).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.Continent</code>.
     */
    public final TableField<CountryRecord, CountryContinent> CONTINENT = createField(DSL.name("Continent"), SQLDataType.VARCHAR(13).nullable(false).defaultValue(DSL.inline("Asia", SQLDataType.VARCHAR)).asEnumDataType(CountryContinent.class), this, "");

    /**
     * The column <code>world.country.Region</code>.
     */
    public final TableField<CountryRecord, String> REGION = createField(DSL.name("Region"), SQLDataType.CHAR(26).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.SurfaceArea</code>.
     */
    public final TableField<CountryRecord, Double> SURFACEAREA = createField(DSL.name("SurfaceArea"), SQLDataType.FLOAT.nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>world.country.IndepYear</code>.
     */
    public final TableField<CountryRecord, Short> INDEPYEAR = createField(DSL.name("IndepYear"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>world.country.Population</code>.
     */
    public final TableField<CountryRecord, Integer> POPULATION = createField(DSL.name("Population"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>world.country.LifeExpectancy</code>.
     */
    public final TableField<CountryRecord, Double> LIFEEXPECTANCY = createField(DSL.name("LifeExpectancy"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>world.country.GNP</code>.
     */
    public final TableField<CountryRecord, Double> GNP = createField(DSL.name("GNP"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>world.country.GNPOld</code>.
     */
    public final TableField<CountryRecord, Double> GNPOLD = createField(DSL.name("GNPOld"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>world.country.LocalName</code>.
     */
    public final TableField<CountryRecord, String> LOCALNAME = createField(DSL.name("LocalName"), SQLDataType.CHAR(45).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.GovernmentForm</code>.
     */
    public final TableField<CountryRecord, String> GOVERNMENTFORM = createField(DSL.name("GovernmentForm"), SQLDataType.CHAR(45).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.country.HeadOfState</code>.
     */
    public final TableField<CountryRecord, String> HEADOFSTATE = createField(DSL.name("HeadOfState"), SQLDataType.CHAR(60), this, "");

    /**
     * The column <code>world.country.Capital</code>.
     */
    public final TableField<CountryRecord, Integer> CAPITAL = createField(DSL.name("Capital"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>world.country.Code2</code>.
     */
    public final TableField<CountryRecord, String> CODE2 = createField(DSL.name("Code2"), SQLDataType.CHAR(2).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    private Country(Name alias, Table<CountryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Country(Name alias, Table<CountryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>world.country</code> table reference
     */
    public Country(String alias) {
        this(DSL.name(alias), COUNTRY);
    }

    /**
     * Create an aliased <code>world.country</code> table reference
     */
    public Country(Name alias) {
        this(alias, COUNTRY);
    }

    /**
     * Create a <code>world.country</code> table reference
     */
    public Country() {
        this(DSL.name("country"), null);
    }

    public <O extends Record> Country(Table<O> path, ForeignKey<O, CountryRecord> childPath, InverseForeignKey<O, CountryRecord> parentPath) {
        super(path, childPath, parentPath, COUNTRY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CountryPath extends Country implements Path<CountryRecord> {
        public <O extends Record> CountryPath(Table<O> path, ForeignKey<O, CountryRecord> childPath, InverseForeignKey<O, CountryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CountryPath(Name alias, Table<CountryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CountryPath as(String alias) {
            return new CountryPath(DSL.name(alias), this);
        }

        @Override
        public CountryPath as(Name alias) {
            return new CountryPath(alias, this);
        }

        @Override
        public CountryPath as(Table<?> alias) {
            return new CountryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : World.WORLD;
    }

    @Override
    public UniqueKey<CountryRecord> getPrimaryKey() {
        return Keys.KEY_COUNTRY_PRIMARY;
    }

    private transient CityPath _city;

    /**
     * Get the implicit to-many join path to the <code>world.city</code> table
     */
    public CityPath city() {
        if (_city == null)
            _city = new CityPath(this, null, Keys.CITY_IBFK_1.getInverseKey());

        return _city;
    }

    private transient CountrylanguagePath _countrylanguage;

    /**
     * Get the implicit to-many join path to the
     * <code>world.countrylanguage</code> table
     */
    public CountrylanguagePath countrylanguage() {
        if (_countrylanguage == null)
            _countrylanguage = new CountrylanguagePath(this, null, Keys.COUNTRYLANGUAGE_IBFK_1.getInverseKey());

        return _countrylanguage;
    }

    @Override
    public Country as(String alias) {
        return new Country(DSL.name(alias), this);
    }

    @Override
    public Country as(Name alias) {
        return new Country(alias, this);
    }

    @Override
    public Country as(Table<?> alias) {
        return new Country(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Country rename(String name) {
        return new Country(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Country rename(Name name) {
        return new Country(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Country rename(Table<?> name) {
        return new Country(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Country where(Condition condition) {
        return new Country(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Country where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Country where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Country where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Country where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Country where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Country where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Country where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Country whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Country whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
