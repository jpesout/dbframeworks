/*
 * This file is generated by jOOQ.
 */
package cz.pesout.dbframeworks.jooq.generated.tables.records;


import cz.pesout.dbframeworks.jooq.generated.tables.City;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CityRecord extends UpdatableRecordImpl<CityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>world.city.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>world.city.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>world.city.Name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>world.city.Name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>world.city.CountryCode</code>.
     */
    public void setCountrycode(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>world.city.CountryCode</code>.
     */
    public String getCountrycode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>world.city.District</code>.
     */
    public void setDistrict(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>world.city.District</code>.
     */
    public String getDistrict() {
        return (String) get(3);
    }

    /**
     * Setter for <code>world.city.Population</code>.
     */
    public void setPopulation(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>world.city.Population</code>.
     */
    public Integer getPopulation() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CityRecord
     */
    public CityRecord() {
        super(City.CITY);
    }

    /**
     * Create a detached, initialised CityRecord
     */
    public CityRecord(Integer id, String name, String countrycode, String district, Integer population) {
        super(City.CITY);

        setId(id);
        setName(name);
        setCountrycode(countrycode);
        setDistrict(district);
        setPopulation(population);
        resetChangedOnNotNull();
    }
}
